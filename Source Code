import java.sql.*;

import java.util.Scanner;

public class CartServiceMain {
    public static void main(String[] args) {
        // Create an instance of CartService with the database file path
        CartService cartService = new CartService("C:/data/my_database.sqlite");

        // Example method calls
        Scanner scanner = new Scanner(System.in);
        System.out.println("Select operation:\n1. Add to cart\n2. Remove from cart\n3. Sign out cart");
        int operation = scanner.nextInt();
        int userId = 1; // Assuming a user ID for testing purposes
        int productId = 1; // Assuming a product ID for testing purposes
        int quantity = 2; // Assuming a quantity for testing purposes

        switch (operation) {
            case 1:
                cartService.addToCart(userId, productId, quantity);
                break;
            case 2:
                System.out.println("Enter cart item ID to remove:");
                int cartItemId = scanner.nextInt();
                cartService.removeFromCart(userId, cartItemId);
                break;
            case 3:
                cartService.signOutCart(userId);
                break;
            default:
                System.out.println("Invalid operation.");
        }

        System.out.println("Operations completed successfully.");
    }
}
class User {
    int user_id;
    String username;
    String password;
    String email;

    User(int user_id, String username, String password, String email) {
        this.user_id = user_id;
        this.username = username;
        this.password = password;
        this.email = email;
    }
}

class Product {
    int product_id;
    String name;
    String description;
    double price;

    Product(int product_id, String name, String description, double price) {
        this.product_id = product_id;
        this.name = name;
        this.description = description;
        this.price = price;
    }
}

class Cart {
    int cart_id;
    int user_id;
    String status;
    double total_price;

    Cart(int cart_id, int user_id, String status, double total_price) {
        this.cart_id = cart_id;
        this.user_id = user_id;
        this.status = status;
        this.total_price = total_price;
    }
}

class CartService {
    String database;

    CartService(String database) {
        this.database = database;
    }

    void addToCart(int user_id, int product_id, int quantity) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:" + database);

            // Check if the user already has an active cart
            int cart_id = getActiveCartId(conn, user_id);

            if (cart_id == -1) {
                // Create a new cart if the user doesn't have an active one
                cart_id = createNewCart(conn, user_id);
            }

            // Check if the item is already in the cart
            int cartItemId = getCartItem(conn, cart_id, product_id);

            if (cartItemId != -1) {
                // Update quantity if item is already in the cart
                updateCartItemQuantity(conn, cartItemId, quantity);
            } else {
                // Insert new item into the cart
                insertCartItem(conn, cart_id, product_id, quantity);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    void removeFromCart(int user_id, int cart_item_id) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:" + database);

            // Check if the cart item belongs to the user
            int cart_id = getCartIdOfCartItem(conn, cart_item_id, user_id);
            if (cart_id != -1) {
                // Remove the item from the cart
                deleteCartItem(conn, cart_item_id);
            } else {
                throw new Exception("Cart item does not belong to the user.");
            }
        } catch (SQLException e) {
    e.printStackTrace();
} catch (Exception e) {
    e.printStackTrace();
} finally {
    try {
        if (pstmt != null)
            pstmt.close();
        if (conn != null)
            conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    }

    void signOutCart(int user_id) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:" + database);

            // Update the status of the user's active cart to 'signed_out'
            int cart_id = getActiveCartId(conn, user_id);
            if (cart_id != -1) {
                updateCartStatus(conn, cart_id, "signed_out");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    boolean hasActiveCart(int user_id) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        boolean hasActiveCart = false;

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:" + database);

            String query = "SELECT cart_id FROM Cart WHERE user_id = ? AND status = 'active'";
            pstmt = conn.prepareStatement(query);
            pstmt.setInt(1, user_id);
            rs = pstmt.executeQuery();

            hasActiveCart = rs.next(); // If there's a result, the user has an active cart
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (pstmt != null)
                    pstmt.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return hasActiveCart;
    }

    private int getActiveCartId(Connection conn, int user_id) throws SQLException {
        String query = "SELECT cart_id FROM Cart WHERE user_id = ? AND status = 'active'";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, user_id);
        ResultSet rs = pstmt.executeQuery();
        int cart_id = -1;
        if (rs.next()) {
            cart_id = rs.getInt("cart_id");
        }
        rs.close();
        pstmt.close();
        return cart_id;
    }

    private int createNewCart(Connection conn, int user_id) throws SQLException {
        String query = "INSERT INTO Cart (user_id, status) VALUES (?, 'active')";
        PreparedStatement pstmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        pstmt.setInt(1, user_id);
        pstmt.executeUpdate();
        ResultSet generatedKeys = pstmt.getGeneratedKeys();
        int cart_id = -1;
        if (generatedKeys.next()) {
            cart_id = generatedKeys.getInt(1);
        }
        pstmt.close();
        return cart_id;
    }

    private int getCartItem(Connection conn, int cart_id, int product_id) throws SQLException {
        String query = "SELECT cart_item_id FROM CartItem WHERE cart_id = ? AND product_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, cart_id);
        pstmt.setInt(2, product_id);
        ResultSet rs = pstmt.executeQuery();
        int cartItemId = -1;
        if (rs.next()) {
            cartItemId = rs.getInt("cart_item_id");
        }
        rs.close();
        pstmt.close();
        return cartItemId;
    }

    private void updateCartItemQuantity(Connection conn, int cart_item_id, int quantity) throws SQLException {
        String query = "UPDATE CartItem SET quantity = quantity + ? WHERE cart_item_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, quantity);
        pstmt.setInt(2, cart_item_id);
        pstmt.executeUpdate();
        pstmt.close();
    }

    private void insertCartItem(Connection conn, int cart_id, int product_id, int quantity) throws SQLException {
        String query = "INSERT INTO CartItem (cart_id, product_id, quantity) VALUES (?, ?, ?)";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, cart_id);
        pstmt.setInt(2, product_id);
        pstmt.setInt(3, quantity);
        pstmt.executeUpdate();
        pstmt.close();
    }

    private int getCartIdOfCartItem(Connection conn, int cart_item_id, int user_id) throws SQLException {
        String query = "SELECT Cart.cart_id FROM CartItem JOIN Cart ON CartItem.cart_id = Cart.cart_id WHERE cart_item_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, cart_item_id);
        ResultSet rs = pstmt.executeQuery();
        int cartId = -1;
        if (rs.next()) {
            cartId = rs.getInt("cart_id");
        }
        rs.close();
        pstmt.close();
        return cartId;
    }

    private void deleteCartItem(Connection conn, int cart_item_id) throws SQLException {
        String query = "DELETE FROM CartItem WHERE cart_item_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, cart_item_id);
        pstmt.executeUpdate();
        pstmt.close();
    }

    private void updateCartStatus(Connection conn, int cart_id, String status) throws SQLException {
        String query = "UPDATE Cart SET status = ? WHERE cart_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setString(1, status);
        pstmt.setInt(2, cart_id);
        pstmt.executeUpdate();
        pstmt.close();
    }
}
